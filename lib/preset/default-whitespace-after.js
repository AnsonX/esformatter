module.exports = {
  "whiteSpace" : {
    "after" : {
      "AssignmentPattern" : 1,
      "ArrayExpressionOpening" : 0,
      "ArrayExpressionClosing" : 0,
      "ArrayExpressionComma" : 1,
      "ArrayPatternOpening": 0,
      "ArrayPatternClosing": 1,
      "ArrayPatternComma": 1,
      "ArrowFunctionExpressionArrow": 1,
      "ArrowFunctionExpressionOpeningBrace": 0,
      "ArrowFunctionExpressionClosingBrace": 0,
      "ArgumentComma" : 1,
      "ArgumentList" : 0,
      "AssignmentOperator" : 1,
      "BinaryExpression": 0,
      "BinaryExpressionOperator" : 1,
      "BlockComment" : 1,
      "BlockStatementClosingBrace" : 1,
      "BlockStatementOpeningBrace" : 1,
      "CallExpression" : -1,
      "CallExpressionOpeningParentheses" : -1,
      "CallExpressionClosingParentheses" : -1,
      "CatchParameterList" : 0,
      "CatchOpeningBrace" : 1,
      "CatchClosingBrace" : 1,
      "CatchKeyword" : 1,
      "ClassOpeningBrace" : 1,
      "ClassClosingBrace" : 1,
      "CommaOperator" : 1,
      "ConditionalExpressionConsequent" : 1,
      "ConditionalExpressionTest" : 1,
      "DoWhileStatementOpeningBrace" : 1,
      "DoWhileStatementClosingBrace" : 1,
      "DoWhileStatementBody" : 1,
      "EmptyStatement" : 0,
      "ExpressionOpeningParentheses" : 0,
      "FinallyKeyword" : -1,
      "FinallyOpeningBrace" : 1,
      "FinallyClosingBrace" : 1,
      "ForInStatement" : 1,
      "ForInStatementExpressionOpening" : 0,
      "ForInStatementExpressionClosing" : 1,
      "ForInStatementOpeningBrace" : 1,
      "ForInStatementClosingBrace" : 1,
      "ForOfStatement" : 1,
      "ForOfStatementExpressionOpening" : 0,
      "ForOfStatementExpressionClosing" : 1,
      "ForOfStatementOpeningBrace" : 1,
      "ForOfStatementClosingBrace" : 1,
      "ForStatement" : 1,
      "ForStatementExpressionOpening" : 0,
      "ForStatementExpressionClosing" : 1,
      "ForStatementClosingBrace" : 1,
      "ForStatementOpeningBrace" : 1,
      "ForStatementSemicolon" : 1,
      "FunctionReservedWord": 0,
      "FunctionName" : 0,
      "FunctionExpressionOpeningBrace" : 1,
      "FunctionExpressionClosingBrace" : 0,
      "FunctionDeclarationOpeningBrace" : 1,
      "FunctionDeclarationClosingBrace" : 1,
      "IIFEOpeningParentheses" : 0,
      "IfStatementConditionalOpening" : 0,
      "IfStatementConditionalClosing" : 1,
      "IfStatementOpeningBrace" : 1,
      "IfStatementClosingBrace" : 1,
      "ModuleSpecifierOpeningBrace": 1,
      "ElseStatementOpeningBrace" : 1,
      "ElseStatementClosingBrace" : 1,
      "ElseIfStatementOpeningBrace" : 1,
      "ElseIfStatementClosingBrace" : 1,
      "MemberExpressionClosing": 0,
      "MemberExpressionOpening": 0,
      "MemberExpressionPeriod": 0,
      "MethodDefinitionName": 0,
      "LogicalExpressionOperator" : 1,
      "ObjectExpressionOpeningBrace": 0,
      "ObjectExpressionClosingBrace": 0,
      "ObjectPatternOpeningBrace": 0,
      "ObjectPatternClosingBrace": 1,
      "ObjectPatternComma": 1,
      "PropertyName" : 0,
      "PropertyValue" : 0,
      "ParameterComma" : 1,
      "ParameterList" : 0,
      "SwitchDiscriminantOpening" : 0,
      "SwitchDiscriminantClosing" : 1,
      "ThrowKeyword": 1,
      "TryKeyword": -1,
      "TryOpeningBrace" : 1,
      "TryClosingBrace" : 1,
      "UnaryExpressionOperator": 0,
      "UpdateExpressionOperator": 0,
      "VariableName" : 1,
      "VariableValue" : 0,
      "VariableDeclarationSemiColon" : 0,
      "WhileStatementConditionalOpening" : 0,
      "WhileStatementConditionalClosing" : 1,
      "WhileStatementOpeningBrace" : 1,
      "WhileStatementClosingBrace" : 1
    }
  }
};
